{"name": "test_business_scenario[case_info3]", "status": "broken", "statusDetails": {"message": "SystemExit: None", "trace": "@pytest.fixture(scope='session', autouse=True)\n    @allure.story(\"登录\")\n    def system_login():\n        try:\n            api_info = get_testcase_yaml('./data/loginName.yaml')\n>           RequestBase().specification_yaml(api_info[0][0], api_info[0][1])\n\ntestcase\\conftest.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\apiutil.py:118: in specification_yaml\n    raise e\nbase\\apiutil.py:115: in specification_yaml\n    raise e\nbase\\apiutil.py:109: in specification_yaml\n    self.asserts.assert_result(validation, res_json, status_code)\ncommon\\assertions.py:197: in assert_result\n    raise exceptions\ncommon\\assertions.py:181: in assert_result\n    flag = self.equal_assert(value, response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pythonproject.common.assertions.Assertions object at 0x0000023CBC1E5250>\nexpected_results = {'msg': '登录成功'}\nactual_results = {'error_code': None, 'msg': '登录成功', 'msg_code': 200, 'orgId': '6140913758128971280', ...}\nstatuc_code = None\n\n    def equal_assert(self, expected_results, actual_results, statuc_code=None):\n        \"\"\"\n        相等断言模式\n        :param expected_results: 预期结果，yaml文件validation值\n        :param actual_results: 接口实际响应结果\n        :return:\n        \"\"\"\n        flag = 0\n        if isinstance(actual_results, dict) and isinstance(expected_results, dict):\n            # 找出实际结果与预期结果共同的key\n>           common_keys = list(list(expected_results.keys()) & list(actual_results.keys()))[0]\nE           TypeError: unsupported operand type(s) for &: 'list' and 'list'\n\ncommon\\assertions.py:65: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture(scope='session', autouse=True)\n    @allure.story(\"登录\")\n    def system_login():\n        try:\n            api_info = get_testcase_yaml('./data/loginName.yaml')\n            RequestBase().specification_yaml(api_info[0][0], api_info[0][1])\n        except Exception as e:\n            logs.error(f'登录接口出现异常，导致后续接口无法继续运行，请检查程序！，{e}')\n>           exit()\n\ntestcase\\conftest.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Use exit() or Ctrl-Z plus Return to exit, code = None\n\n    def __call__(self, code=None):\n        # Shells like IDLE catch the SystemExit, but listen when their\n        # stdin wrapper is closed.\n        try:\n            sys.stdin.close()\n        except:\n            pass\n>       raise SystemExit(code)\nE       SystemExit: None\n\nC:\\Users\\86135\\AppData\\Local\\Programs\\Python\\Python39\\lib\\_sitebuiltins.py:26: SystemExit"}, "attachments": [{"name": "log", "source": "999594b7-da10-4cf4-bb1d-88c7c13031d9-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_info", "value": "{'baseInfo': {'api_name': '订单支付', 'url': '/coupApply/cms/orderPay', 'method': 'post', 'header': {'Content-Type': 'application/json;charset=UTF-8'}}, 'testCase': [{'case_name': '订单支付', 'json': {'orderNumber': '${get_extract_data(orderNumber)}', 'userId': '${get_extract_data(userId)}', 'timeStamp': '${timestamp()}'}, 'validation': [{'eq': {'message': '订单支付成功'}}]}]}"}], "start": 1739351153306, "stop": 1739351153306, "uuid": "0acfd4d4-cf6b-40c9-a339-7c154a48897c", "historyId": "db34d83f39db3d7dc54710668c5ee481", "testCaseId": "ce37886b3740172f9b4193b18f591942", "fullName": "testcase.Business interface.test_business_scenario.TestEBusinessScenario#test_business_scenario", "labels": [{"name": "story", "value": "C01_商品列表到下单支付流程"}, {"name": "feature", "value": "M01_电子商务管理系统（业务场景）"}, {"name": "parentSuite", "value": "testcase.Business interface"}, {"name": "suite", "value": "test_business_scenario"}, {"name": "subSuite", "value": "TestEBusinessScenario"}, {"name": "host", "value": "Henry"}, {"name": "thread", "value": "25672-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.Business interface.test_business_scenario"}]}